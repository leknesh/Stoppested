//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.1.1'.
//
package com.example.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.AnyAdapter
import com.apollographql.apollo.api.BooleanAdapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableAnyAdapter
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.example.StopPlaceQuery
import com.example.type.TransportMode
import com.example.type.adapter.TransportMode_ResponseAdapter
import kotlin.Any
import kotlin.Boolean
import kotlin.String
import kotlin.collections.List

public object StopPlaceQuery_ResponseAdapter {
  public object Data : Adapter<StopPlaceQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("stopPlace")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): StopPlaceQuery.Data {
      var _stopPlace: StopPlaceQuery.StopPlace? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _stopPlace = StopPlace.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return StopPlaceQuery.Data(
        stopPlace = _stopPlace
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: StopPlaceQuery.Data,
    ) {
      writer.name("stopPlace")
      StopPlace.obj().nullable().toJson(writer, customScalarAdapters, value.stopPlace)
    }
  }

  public object StopPlace : Adapter<StopPlaceQuery.StopPlace> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "name", "estimatedCalls")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): StopPlaceQuery.StopPlace {
      var _id: String? = null
      var _name: String? = null
      var _estimatedCalls: List<StopPlaceQuery.EstimatedCall>? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _estimatedCalls = EstimatedCall.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return StopPlaceQuery.StopPlace(
        id = _id ?: missingField(reader, "id"),
        name = _name ?: missingField(reader, "name"),
        estimatedCalls = _estimatedCalls ?: missingField(reader, "estimatedCalls")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: StopPlaceQuery.StopPlace,
    ) {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("estimatedCalls")
      EstimatedCall.obj().list().toJson(writer, customScalarAdapters, value.estimatedCalls)
    }
  }

  public object EstimatedCall : Adapter<StopPlaceQuery.EstimatedCall> {
    public val RESPONSE_NAMES: List<String> =
        listOf("realtime", "aimedArrivalTime", "aimedDepartureTime", "expectedArrivalTime", "expectedDepartureTime", "actualArrivalTime", "actualDepartureTime", "date", "forBoarding", "forAlighting", "destinationDisplay", "quay", "serviceJourney")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): StopPlaceQuery.EstimatedCall {
      var _realtime: Boolean? = null
      var _aimedArrivalTime: Any? = null
      var _aimedDepartureTime: Any? = null
      var _expectedArrivalTime: Any? = null
      var _expectedDepartureTime: Any? = null
      var _actualArrivalTime: Any? = null
      var _actualDepartureTime: Any? = null
      var _date: Any? = null
      var _forBoarding: Boolean? = null
      var _forAlighting: Boolean? = null
      var _destinationDisplay: StopPlaceQuery.DestinationDisplay? = null
      var _quay: StopPlaceQuery.Quay? = null
      var _serviceJourney: StopPlaceQuery.ServiceJourney? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _realtime = BooleanAdapter.fromJson(reader, customScalarAdapters)
          1 -> _aimedArrivalTime = AnyAdapter.fromJson(reader, customScalarAdapters)
          2 -> _aimedDepartureTime = AnyAdapter.fromJson(reader, customScalarAdapters)
          3 -> _expectedArrivalTime = AnyAdapter.fromJson(reader, customScalarAdapters)
          4 -> _expectedDepartureTime = AnyAdapter.fromJson(reader, customScalarAdapters)
          5 -> _actualArrivalTime = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          6 -> _actualDepartureTime = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          7 -> _date = AnyAdapter.fromJson(reader, customScalarAdapters)
          8 -> _forBoarding = BooleanAdapter.fromJson(reader, customScalarAdapters)
          9 -> _forAlighting = BooleanAdapter.fromJson(reader, customScalarAdapters)
          10 -> _destinationDisplay = DestinationDisplay.obj().nullable().fromJson(reader, customScalarAdapters)
          11 -> _quay = Quay.obj().fromJson(reader, customScalarAdapters)
          12 -> _serviceJourney = ServiceJourney.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return StopPlaceQuery.EstimatedCall(
        realtime = _realtime ?: missingField(reader, "realtime"),
        aimedArrivalTime = _aimedArrivalTime ?: missingField(reader, "aimedArrivalTime"),
        aimedDepartureTime = _aimedDepartureTime ?: missingField(reader, "aimedDepartureTime"),
        expectedArrivalTime = _expectedArrivalTime ?: missingField(reader, "expectedArrivalTime"),
        expectedDepartureTime = _expectedDepartureTime ?: missingField(reader, "expectedDepartureTime"),
        actualArrivalTime = _actualArrivalTime,
        actualDepartureTime = _actualDepartureTime,
        date = _date ?: missingField(reader, "date"),
        forBoarding = _forBoarding ?: missingField(reader, "forBoarding"),
        forAlighting = _forAlighting ?: missingField(reader, "forAlighting"),
        destinationDisplay = _destinationDisplay,
        quay = _quay ?: missingField(reader, "quay"),
        serviceJourney = _serviceJourney ?: missingField(reader, "serviceJourney")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: StopPlaceQuery.EstimatedCall,
    ) {
      writer.name("realtime")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.realtime)

      writer.name("aimedArrivalTime")
      AnyAdapter.toJson(writer, customScalarAdapters, value.aimedArrivalTime)

      writer.name("aimedDepartureTime")
      AnyAdapter.toJson(writer, customScalarAdapters, value.aimedDepartureTime)

      writer.name("expectedArrivalTime")
      AnyAdapter.toJson(writer, customScalarAdapters, value.expectedArrivalTime)

      writer.name("expectedDepartureTime")
      AnyAdapter.toJson(writer, customScalarAdapters, value.expectedDepartureTime)

      writer.name("actualArrivalTime")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.actualArrivalTime)

      writer.name("actualDepartureTime")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.actualDepartureTime)

      writer.name("date")
      AnyAdapter.toJson(writer, customScalarAdapters, value.date)

      writer.name("forBoarding")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.forBoarding)

      writer.name("forAlighting")
      BooleanAdapter.toJson(writer, customScalarAdapters, value.forAlighting)

      writer.name("destinationDisplay")
      DestinationDisplay.obj().nullable().toJson(writer, customScalarAdapters, value.destinationDisplay)

      writer.name("quay")
      Quay.obj().toJson(writer, customScalarAdapters, value.quay)

      writer.name("serviceJourney")
      ServiceJourney.obj().toJson(writer, customScalarAdapters, value.serviceJourney)
    }
  }

  public object DestinationDisplay : Adapter<StopPlaceQuery.DestinationDisplay> {
    public val RESPONSE_NAMES: List<String> = listOf("frontText")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): StopPlaceQuery.DestinationDisplay {
      var _frontText: String? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _frontText = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return StopPlaceQuery.DestinationDisplay(
        frontText = _frontText
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: StopPlaceQuery.DestinationDisplay,
    ) {
      writer.name("frontText")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.frontText)
    }
  }

  public object Quay : Adapter<StopPlaceQuery.Quay> {
    public val RESPONSE_NAMES: List<String> = listOf("id")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): StopPlaceQuery.Quay {
      var _id: String? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return StopPlaceQuery.Quay(
        id = _id ?: missingField(reader, "id")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: StopPlaceQuery.Quay,
    ) {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)
    }
  }

  public object ServiceJourney : Adapter<StopPlaceQuery.ServiceJourney> {
    public val RESPONSE_NAMES: List<String> = listOf("journeyPattern")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): StopPlaceQuery.ServiceJourney {
      var _journeyPattern: StopPlaceQuery.JourneyPattern? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _journeyPattern = JourneyPattern.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return StopPlaceQuery.ServiceJourney(
        journeyPattern = _journeyPattern
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: StopPlaceQuery.ServiceJourney,
    ) {
      writer.name("journeyPattern")
      JourneyPattern.obj().nullable().toJson(writer, customScalarAdapters, value.journeyPattern)
    }
  }

  public object JourneyPattern : Adapter<StopPlaceQuery.JourneyPattern> {
    public val RESPONSE_NAMES: List<String> = listOf("line")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): StopPlaceQuery.JourneyPattern {
      var _line: StopPlaceQuery.Line? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _line = Line.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return StopPlaceQuery.JourneyPattern(
        line = _line ?: missingField(reader, "line")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: StopPlaceQuery.JourneyPattern,
    ) {
      writer.name("line")
      Line.obj().toJson(writer, customScalarAdapters, value.line)
    }
  }

  public object Line : Adapter<StopPlaceQuery.Line> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "name", "transportMode")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): StopPlaceQuery.Line {
      var _id: String? = null
      var _name: String? = null
      var _transportMode: TransportMode? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _transportMode = TransportMode_ResponseAdapter.nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return StopPlaceQuery.Line(
        id = _id ?: missingField(reader, "id"),
        name = _name,
        transportMode = _transportMode
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: StopPlaceQuery.Line,
    ) {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("transportMode")
      TransportMode_ResponseAdapter.nullable().toJson(writer, customScalarAdapters, value.transportMode)
    }
  }
}
