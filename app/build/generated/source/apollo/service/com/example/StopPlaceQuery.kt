//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.1.1'.
//
package com.example

import com.apollographql.apollo.annotations.ApolloAdaptableWith
import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.adapter.StopPlaceQuery_ResponseAdapter
import com.example.adapter.StopPlaceQuery_VariablesAdapter
import com.example.selections.StopPlaceQuerySelections
import com.example.type.TransportMode
import kotlin.Any
import kotlin.Boolean
import kotlin.String
import kotlin.collections.List
import com.example.type.QueryType as CompiledQueryType

public data class StopPlaceQuery(
  public val id: String,
) : Query<StopPlaceQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    StopPlaceQuery_VariablesAdapter.serializeVariables(writer, this, customScalarAdapters, withDefaultValues)
  }

  override fun adapter(): Adapter<Data> = StopPlaceQuery_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = CompiledQueryType.type
  )
  .selections(selections = StopPlaceQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(StopPlaceQuery_ResponseAdapter.Data::class)
  public data class Data(
    /**
     * Get a single stopPlace based on its id)
     */
    public val stopPlace: StopPlace?,
  ) : Query.Data

  public data class StopPlace(
    public val id: String,
    public val name: String,
    /**
     * List of visits to this stop place as part of vehicle journeys.
     */
    public val estimatedCalls: List<EstimatedCall>,
  )

  public data class EstimatedCall(
    /**
     * Whether this call has been updated with real time information.
     */
    public val realtime: Boolean,
    /**
     * Scheduled time of arrival at quay. Not affected by read time updated
     */
    public val aimedArrivalTime: Any,
    /**
     * Scheduled time of departure from quay. Not affected by read time updated
     */
    public val aimedDepartureTime: Any,
    /**
     * Expected time of arrival at quay. Updated with real time information if available. Will be
     * null if an actualArrivalTime exists
     */
    public val expectedArrivalTime: Any,
    /**
     * Expected time of departure from quay. Updated with real time information if available. Will
     * be null if an actualDepartureTime exists
     */
    public val expectedDepartureTime: Any,
    /**
     * Actual time of arrival at quay. Updated from real time information if available.
     */
    public val actualArrivalTime: Any?,
    /**
     * Actual time of departure from quay. Updated with real time information if available.
     */
    public val actualDepartureTime: Any?,
    /**
     * The date the estimated call is valid for.
     */
    public val date: Any,
    /**
     * Whether vehicle may be boarded at quay.
     */
    public val forBoarding: Boolean,
    /**
     * Whether vehicle may be alighted at quay.
     */
    public val forAlighting: Boolean,
    public val destinationDisplay: DestinationDisplay?,
    public val quay: Quay,
    public val serviceJourney: ServiceJourney,
  )

  public data class DestinationDisplay(
    /**
     * Name of destination to show on front of vehicle.
     */
    public val frontText: String?,
  )

  public data class Quay(
    public val id: String,
  )

  public data class ServiceJourney(
    /**
     * JourneyPattern for the service journey, according to scheduled data. If the ServiceJourney is
     * not included in the scheduled data, null is returned.
     */
    public val journeyPattern: JourneyPattern?,
  )

  public data class JourneyPattern(
    public val line: Line,
  )

  public data class Line(
    public val id: String,
    public val name: String?,
    public val transportMode: TransportMode?,
  )

  public companion object {
    public const val OPERATION_ID: String =
        "0ab4215dbae22963c6cf09feebda444a3644012d5f0c9fbc65e6f0abeb596969"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * ```
     * query StopPlace($id: String!) {
     *   stopPlace(id: $id) {
     *     id
     *     name
     *     estimatedCalls(timeRange: 72100, numberOfDepartures: 10) {
     *       realtime
     *       aimedArrivalTime
     *       aimedDepartureTime
     *       expectedArrivalTime
     *       expectedDepartureTime
     *       actualArrivalTime
     *       actualDepartureTime
     *       date
     *       forBoarding
     *       forAlighting
     *       destinationDisplay {
     *         frontText
     *       }
     *       quay {
     *         id
     *       }
     *       serviceJourney {
     *         journeyPattern {
     *           line {
     *             id
     *             name
     *             transportMode
     *           }
     *         }
     *       }
     *     }
     *   }
     * }
     * ```
     */
    public val OPERATION_DOCUMENT: String
      get() = "query StopPlace(${'$'}id: String!) { stopPlace(id: ${'$'}id) { id name estimatedCalls(timeRange: 72100, numberOfDepartures: 10) { realtime aimedArrivalTime aimedDepartureTime expectedArrivalTime expectedDepartureTime actualArrivalTime actualDepartureTime date forBoarding forAlighting destinationDisplay { frontText } quay { id } serviceJourney { journeyPattern { line { id name transportMode } } } } } }"

    public const val OPERATION_NAME: String = "StopPlace"
  }
}
